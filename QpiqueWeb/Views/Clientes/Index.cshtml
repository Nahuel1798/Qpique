@{
  ViewData["Title"] = "Administrar Clientes";
}

<div id="app" class="container-fluid py-4">
  <!-- Notificaciones -->
  <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1080;">
    <div class="toast align-items-center text-bg-danger border-0 show" role="alert" v-if="errorMensaje">
      <div class="d-flex">
        <div class="toast-body">
          {{ errorMensaje }}
        </div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" @@click="errorMensaje = ''"></button>
      </div>
    </div>
    <div class="toast align-items-center text-bg-success border-0 show" role="alert" v-if="exitoMensaje">
      <div class="d-flex">
        <div class="toast-body">
          {{ exitoMensaje }}
        </div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" @@click="exitoMensaje = ''"></button>
      </div>
    </div>
  </div>
  <div class="contenido-glass">
    <h2 class="mb-4"><i class="bi bi-people-fill me-2"></i> Administrar Clientes</h2>

    <!-- Buscador -->
    <div class="mb-3">
      <input v-model="searchString" @@input="resetPageAndFetch" class="form-control"
        placeholder="Buscar por nombre o apellido..." />
    </div>

    <!-- Grid de Clientes en Cards -->
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
      <div class="col" v-for="cliente in clientes" :key="cliente.id">
        <div class="card h-100 shadow rounded-4 border-0 p-3 bg-light">
          <div class="card-body d-flex flex-column align-items-center text-center">
            <img :src="'/img/avatar.png'" alt="Avatar" class="rounded-circle mb-4 shadow"
              style="width: 110px; height: 110px; object-fit: cover;" />
            <h4 class="fw-bold text-primary mb-2">{{ cliente.nombre }} {{ cliente.apellido }}</h4>
            <p class="text-muted mb-1 fs-6"><i class="bi bi-telephone me-2"></i>{{ cliente.telefono || 'Sin teléfono' }}
            </p>
            <p class="text-muted mb-3 fs-6"><i class="bi bi-envelope me-2"></i>{{ cliente.email || 'Sin email' }}</p>
          </div>
          <div class="card-footer border-0 bg-transparent d-flex justify-content-around pt-0">
            <button class="btn btn-outline-primary px-4 py-1" @@click="abrirEditar(cliente)">
              <i class="bi bi-pencil me-1"></i>Editar
            </button>
            <button class="btn btn-outline-danger px-4 py-1" @@click="confirmarEliminar(cliente)">
              <i class="bi bi-trash me-1"></i>Eliminar
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Paginacion -->
    <nav aria-label="Paginación" class="mt-4">
      <ul class="pagination justify-content-center">
        <li class="page-item" :class="{ disabled: page === 1 }">
          <a class="page-link" href="#" @@click.prevent="cambiarPagina(page - 1)">Anterior</a>
        </li>
        <li class="page-item" v-for="n in totalPages" :key="n" :class="{ active: n === page }">
          <a class="page-link" href="#" @@click.prevent="cambiarPagina(n)">{{ n }}</a>
        </li>
        <li class="page-item" :class="{ disabled: page === totalPages }">
          <a class="page-link" href="#" @@click.prevent="cambiarPagina(page + 1)">Siguiente</a>
        </li>
      </ul>
    </nav>
  </div>

  <!-- Modal Cliente -->
  <div class="modal fade" tabindex="-1" role="dialog" :class="{ show: showModalEditar }" style="display: block;"
    v-if="showModalEditar">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content border-0 rounded-4 shadow">
        <form v-on:submit.prevent="guardarCambios">
          <div class="modal-header bg-warning text-white">
            <h5 class="modal-title">✏️ Editar Cliente</h5>
            <button type="button" class="btn-close" @@click="cerrarEditar"></button>
          </div>
          <div class="modal-body">
            <div class="mb-3">
              <label>Nombre</label>
              <input v-model="clienteEdit.nombre" class="form-control" required />
            </div>
            <div class="mb-3">
              <label>Apellido</label>
              <input v-model="clienteEdit.apellido" class="form-control" required />
            </div>
            <div class="mb-3">
              <label>Teléfono</label>
              <input v-model="clienteEdit.telefono" class="form-control" />
            </div>
            <div class="mb-3">
              <label>Email</label>
              <input v-model="clienteEdit.email" type="email" class="form-control" />
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" @@click="cerrarEditar">Cancelar</button>
            <button type="submit" class="btn btn-warning">Guardar</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Modal Eliminar -->
  <div class="modal fade" tabindex="-1" role="dialog" :class="{ show: showModalEliminar }" style="display: block;"
    v-if="showModalEliminar">
    <div class="modal-dialog modal-sm">
      <div class="modal-content">
        <div class="modal-header bg-danger text-white">
          <h5 class="modal-title">Confirmar Eliminación</h5>
          <button type="button" class="btn-close" @@click="cerrarEliminar"></button>
        </div>
        <div class="modal-body">
          <p>¿Eliminar cliente <strong>{{ clienteEliminar?.nombre }} {{ clienteEliminar?.apellido }}</strong>?</p>
        </div>
        <div class="modal-footer">
          <button class="btn btn-secondary" @@click="cerrarEliminar">Cancelar</button>
          <button class="btn btn-danger" @@click="eliminarCliente">Eliminar</button>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .modal {
    background-color: rgba(0, 0, 0, 0.5);
  }

  .modal.show {
    display: block;
  }
</style>

@section Scripts {
  <script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

  <script>
    // Añade los token a las peticiones
    axios.interceptors.request.use(config => {
      const token = sessionStorage.getItem('jwt');
      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
      }
      return config;
    }, error => Promise.reject(error));

    // Maneja los errores
    axios.interceptors.response.use(response => response, error => {
      if (error.response && error.response.status === 401) {
        alert('Sesión expirada o no autorizada. Por favor, inicia sesión nuevamente.');
        localStorage.removeItem('jwt');
        window.location.href = "/Identity/Account/Login";
      }
      return Promise.reject(error);
    });

    const { createApp, ref, reactive, computed, watch, onMounted } = Vue;

    createApp({
      setup() {
        const clientes = ref([]);
        const searchString = ref('');
        const showModalEditar = ref(false);
        const showModalEliminar = ref(false);
        const clienteEdit = reactive({});
        const clienteEliminar = ref(null);
        const page = ref(1);
        const pageSize = ref(6);
        const total = ref(0);

        const errorMensaje = ref('');
        const exitoMensaje = ref('');

        const totalPages = computed(() => Math.ceil(total.value / pageSize.value));

        watch(page, () => TraeCliente());
        watch(searchString, () => {
          page.value = 1;
          TraeCliente();
        });

        ///////////// Metodos /////////////
        async function TraeCliente() {
          try {
            const params = {
              page: page.value,
              pageSize: pageSize.value,
              search: searchString.value
            };

            const res = await axios.get('/api/ClientesApi/Paginado', { params });
            clientes.value = res.data.clientes;
            total.value = res.data.total;
          } catch (err) {
            alert('Error al cargar clientes: ' + (err.response?.data || err.message));
          }
        }

        function mostrarError(mensaje) {
          errorMensaje.value = mensaje;
          setTimeout(() => errorMensaje.value = '', 5000);
        }

        function mostrarExito(mensaje) {
          exitoMensaje.value = mensaje;
          setTimeout(() => exitoMensaje.value = '', 4000);
        }

        function cambiarPagina(nuevaPagina) {
          if (nuevaPagina >= 1 && nuevaPagina <= totalPages.value) {
            page.value = nuevaPagina;
          }
        }

        function abrirEditar(cliente) {
          Object.assign(clienteEdit, cliente);
          showModalEditar.value = true;
        }

        function cerrarEditar() {
          showModalEditar.value = false;
          for (const key in clienteEdit) delete clienteEdit[key];
        }

        async function guardarCambios() {
          try {
            await axios.put(`/api/ClientesApi/${clienteEdit.id}`, clienteEdit);
            cerrarEditar();
            TraeCliente();
            mostrarExito('✅ Cambios guardados correctamente.');
          } catch (err) {
            mostrarError('Error guardando cambios: ' + (err.response?.data || err.message));
          }
        }

        function confirmarEliminar(cliente) {
          clienteEliminar.value = cliente;
          showModalEliminar.value = true;
        }

        function cerrarEliminar() {
          showModalEliminar.value = false;
          clienteEliminar.value = null;
        }

        async function eliminarCliente() {
          try {
            await axios.delete(`/api/ClientesApi/${clienteEliminar.value.id}`);
            cerrarEliminar();
            TraeCliente();
            mostrarExito('✅ Cliente eliminado correctamente.');
          } catch (err) {
            mostrarError('Error eliminando cliente: ' + (err.response?.data || err.message));
          }
        }

        //////// Mounted //////////
        onMounted(() => {
          TraeCliente();
        });

        function resetPageAndFetch() {
          page.value = 1;
          TraeCliente();
        }

        return {
          clientes,
          searchString,
          showModalEditar,
          showModalEliminar,
          clienteEdit,
          clienteEliminar,
          page,
          pageSize,
          total,
          totalPages,
          cambiarPagina,
          abrirEditar,
          cerrarEditar,
          guardarCambios,
          confirmarEliminar,
          cerrarEliminar,
          eliminarCliente,
          resetPageAndFetch,
          errorMensaje,
          exitoMensaje,
        };
      }
    }).mount('#app');
  </script>
}
