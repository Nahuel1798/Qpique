@{
    ViewData["Title"] = "Administrar Productos";
}

<div id="app" class="container-fluid py-4">
    <!-- Notificaciones -->
    <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1080;">
        <div class="toast align-items-center text-bg-danger border-0 show" role="alert" v-if="errorMensaje">
            <div class="d-flex">
                <div class="toast-body">
                    {{ errorMensaje }}
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto"
                    @@click="errorMensaje = ''"></button>
            </div>
        </div>
        <div class="toast align-items-center text-bg-success border-0 show" role="alert" v-if="exitoMensaje">
            <div class="d-flex">
                <div class="toast-body">
                    {{ exitoMensaje }}
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto"
                    @@click="exitoMensaje = ''"></button>
            </div>
        </div>
    </div>
    <div class="contenido-glass">
        <!-- Crear Producto -->
        <div class="mb-3 d-flex justify-content-between align-items-center">
            <h2 class="mb-0 d-flex align-items-center">
                <i class="bi bi-box-seam me-2"></i> Administrar Productos
            </h2>
            <a href="/Productos/Create" v-if="estaLogueado"
                class="btn btn-outline-success d-flex align-items-center gap-2">
                <i class="bi bi-plus-circle"></i> Crear Producto
            </a>
        </div>

        <!-- Categorias -->
        <div class="mb-4">
            <div class="d-flex flex-wrap gap-3">
                <!-- Todas -->
                <div class="categoria-card d-flex flex-column align-items-center justify-content-center text-center p-2 rounded"
                    :class="{
                    'border-primary bg-primary text-white': filtros.categoriaId === null,
                    'border-secondary': filtros.categoriaId !== null
                }" style="cursor: pointer; flex: 1 1 0; min-width: 80px; height: 100px; "
                    @@click="() => cambiarCategoria(null)" title="Todas las categorías">
                    <i class="bi bi-card-list fs-2 mb-1"></i>
                    <small>Todos</small>
                </div>

                <!-- Otras categorías -->
                <div v-for="cat in categorias" :key="cat.id" class="categoria-card rounded border" :class="{
                    'border-primary bg-primary text-white': filtros.categoriaId === cat.id,
                    'border-secondary': filtros.categoriaId !== cat.id
                }" style="
                    cursor: pointer;
                    flex: 1 1 0;
                    min-width: 80px;
                    height: 100px;
                    overflow: hidden;
                    position: relative;
                " @@click="() => cambiarCategoria(cat.id)" :title="cat.nombre">
                    <template v-if="cat.imagenUrl">
                        <img :src="cat.imagenUrl" alt="Imagen categoría" style="
                        position: absolute;
                        top: 0;
                        left: 0;
                        width: 100%;
                        height: 100%;
                        object-fit: cover;
                        z-index: 0;
                    " />
                        <div class="d-flex flex-column align-items-center justify-content-center text-center h-100 w-100 position-relative"
                            style="background-color: rgba(0, 0, 0, 0.4); color: white; z-index: 1; padding: 5px;">
                            <small class="text-truncate" style="max-width: 90%">{{ cat.nombre }}</small>
                        </div>
                    </template>
                    <template v-else>
                        <div class="d-flex flex-column align-items-center justify-content-center text-center h-100 w-100"
                            style="padding: 5px;">
                            <i class="bi bi-folder fs-2 mb-1"></i>
                            <small class="text-truncate" style="max-width: 90%">{{ cat.nombre }}</small>
                        </div>
                    </template>
                </div>
            </div>
        </div>

        <!-- Buscador -->
        <div class="mb-4">
            <input type="text" v-model="filtros.nombre" @@input="cargarProductosDebounce"
                placeholder="🔍 Buscar producto..." class="form-control" />
        </div>

        <!-- Grid de Productos en Cards  -->
        <div class="row">
            <div v-for="producto in productos" :key="producto.id" class="col-md-4 mb-4">
                <div class="card h-100 shadow-sm"
                    :class="{ 'border-success': estaSeleccionado(producto.id), 'opacity-75': producto.stock === 0 }">
                    <img :src="producto.imagenUrl || '/img/no-image.png'" class="card-img-top bg-white"
                        alt="Imagen producto" style="height: 200px; object-fit: contain; padding: 10px;">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">{{ producto.nombre }}</h5>
                        <p class="card-text">{{ producto.descripcion }}</p>
                        <p class="mb-1"><strong>Precio:</strong> ${{ producto.precio.toFixed(2) }}</p>
                        <p v-if=estaLogueado><strong>Stock:</strong> {{ producto.stock }}</p>
                        <div class="mb-3 d-flex justify-content-between">
                            <button class="btn btn-sm btn-outline-primary" v-if="estaLogueado"
                                @@click="abrirModalEditar(producto)">
                                <i class="bi bi-pencil"></i> Editar
                            </button>
                            <button class="btn btn-sm btn-outline-danger" v-if="estaLogueado"
                                @@click="abrirModalEliminar(producto)">
                                <i class="bi bi-trash"></i> Eliminar
                            </button>
                        </div>
                        <button class="btn mt-auto fw-bold d-block w-100"
                            :class="estaSeleccionado(producto.id) ? 'btn-outline-danger' : 'btn-outline-primary'"
                            v-if="estaLogueado" @@click="toggleSeleccion(producto)" :disabled="producto.stock === 0">
                            <i :class="estaSeleccionado(producto.id) ? 'bi bi-x-circle' : 'bi bi-cart-plus'"></i>
                            {{ estaSeleccionado(producto.id) ? 'Quitar' : 'Agregar' }}
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Paginacion -->
        <nav aria-label="Paginación">
            <ul class="pagination justify-content-center">
                <li class="page-item" :class="{ disabled: filtros.page === 1 }">
                    <a class="page-link" href="#" @@click.prevent="cambiarPagina(filtros.page - 1)">Anterior</a>
                </li>
                <li class="page-item" v-for="p in totalPaginas" :key="p" :class="{ active: p === filtros.page }">
                    <a class="page-link" href="#" @@click.prevent="cambiarPagina(p)">{{ p }}</a>
                </li>
                <li class="page-item" :class="{ disabled: filtros.page === totalPaginas }">
                    <a class="page-link" href="#" @@click.prevent="cambiarPagina(filtros.page + 1)">Siguiente</a>
                </li>
            </ul>
        </nav>
    </div>

    <!-- Boton Flotante Para el Carrito -->
    <button class="btn btn-primary rounded-circle shadow-lg d-flex align-items-center justify-content-center"
        style="bottom: 30px; right: 30px; z-index: 1050; width: 60px; height: 60px; position: fixed; transition: all 0.3s ease;"
        v-if="estaLogueado" @@click="abrirModalCarrito" :disabled="productosSeleccionados.length === 0"
        title="Ver carrito">
        <i class="bi bi-cart3 fs-4"></i>
        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
            {{ productosSeleccionados.length }}
        </span>
    </button>

    <!-- Modal Carrito -->
    <div class="modal fade" id="modalCarrito" tabindex="-1" aria-labelledby="modalCarritoLabel" aria-hidden="true"
        ref="modalCarrito">
        <div class="modal-dialog modal-xl modal-dialog-scrollable">
            <div class="modal-content border-0 rounded-4 shadow">
                <div class="modal-header border-bottom-0 bg-light rounded-top-4">
                    <h5 class="modal-title" id="modalCarritoLabel">Carrito de Productos para Venta</h5>
                    <button type="button" class="btn-close" @@click="cerrarModalCarrito" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <div v-if="productosSeleccionados.length > 0">

                        <!-- Lista Cards Productos estilo principal -->
                        <div class="row">
                            <div v-for="item in productosSeleccionados" :key="item.id" class="col-md-4 mb-4">
                                <div class="card h-100 shadow-sm"
                                    :class="{ 'border-success': true, 'opacity-75': item.stock === 0 }">
                                    <img :src="item.imagenUrl || '/img/no-image.png'" class="card-img-top"
                                        alt="Imagen producto" style="height:180px; object-fit:contain;">
                                    <div class="card-body d-flex flex-column">
                                        <h5 class="card-title">{{ item.nombre }}</h5>
                                        <p class="card-text">{{ item.descripcion }}</p>
                                        <p class="mb-1"><strong>Precio:</strong> ${{ item.precio.toFixed(2) }}</p>
                                        <p class="mb-1"><strong>Stock:</strong> {{ item.stock }}</p>

                                        <!-- Campo Cantidad con botones + y - -->
                                        <div class="mb-2 d-flex align-items-center">
                                            <label class="me-2 fw-semibold mb-0">Cantidad:</label>
                                            <div class="input-group input-group-sm" style="max-width: 120px;">
                                                <button class="btn btn-outline-secondary" type="button"
                                                    @@click="disminuirCantidad(item)">−</button>
                                                <input type="number" class="form-control text-center" min="1"
                                                    :max="item.stock" v-model.number="item.cantidad"
                                                    @@change="actualizarCantidad(item)" />
                                                <button class="btn btn-outline-secondary" type="button"
                                                    @@click="aumentarCantidad(item)">+</button>
                                            </div>
                                        </div>

                                        <p><strong>Subtotal:</strong> ${{ (item.precio * item.cantidad).toFixed(2) }}
                                        </p>
                                        <button class="btn btn-sm btn-danger mt-auto"
                                            @@click="removerProducto(item.id)">
                                            <i class="bi bi-trash"></i> Quitar
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Total -->
                        <div class="mt-4 text-end fs-5 fw-bold">
                            Total: ${{ totalVenta.toFixed(2) }}
                        </div>
                    </div>

                    <p v-else>No hay productos seleccionados.</p>
                </div>
                <div class="modal-footer justify-content-between">
                    <button type="button" class="btn btn-secondary" @@click="cerrarModalCarrito">Cerrar</button>
                    <a href="#" class="btn btn-success" @@click.prevent="irACrearVenta"
                        :class="{ disabled: productosSeleccionados.length === 0 }">
                        <i class="bi bi-arrow-right-circle"></i> Crear Venta
                    </a>
                </div>

            </div>
        </div>
    </div>

    <!-- Modal Eliminar -->
    <div class="modal fade" id="modalEliminarProducto" tabindex="-1" ref="modalEliminar">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">Eliminar Producto</h5>
                    <button type="button" class="btn-close" @@click="cerrarModalEliminar"></button>
                </div>
                <div class="modal-body">
                    <p>¿Seguro que querés eliminar <strong>{{ productoAEliminar?.nombre }}</strong>?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @@click="cerrarModalEliminar">Cancelar</button>
                    <button class="btn btn-danger" @@click="confirmarEliminar">🗑️ Eliminar</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Editar -->
    <div class="modal fade" id="modalEditarProducto" tabindex="-1" ref="modalEditar">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content border-0 rounded-4 shadow">
                <div class="modal-header border-bottom-0 bg-light rounded-top-4">
                    <h5 class="modal-title">✏️ Editar Producto</h5>
                    <button type="button" class="btn-close" @@click="cerrarModalEditar"></button>
                </div>
                <div class="modal-body">
                    <form v-on:submit.prevent="guardarCambiosProducto">
                        <div class="mb-3">
                            <label>Nombre</label>
                            <input v-model="productoEditando.nombre" class="form-control" required />
                        </div>
                        <div class="mb-3">
                            <label>Descripción</label>
                            <textarea v-model="productoEditando.descripcion" class="form-control" rows="2"></textarea>
                        </div>
                        <div class="mb-3">
                            <label>Precio</label>
                            <input v-model.number="productoEditando.precio" type="number" min="0" class="form-control"
                                required />
                        </div>
                        <div class="mb-3">
                            <label>Stock</label>
                            <input v-model.number="productoEditando.stock" type="number" min="0" class="form-control"
                                required />
                        </div>
                        <div class="mb-3">
                            <label>Categoría</label>
                            <select v-model="productoEditando.categoriaId" class="form-select" required>
                                <option disabled value="">Seleccione una categoría</option>
                                <option v-for="cat in categorias" :value="cat.id">{{ cat.nombre }}</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label>Imagen actual</label>
                            <div class="mb-2">
                                <img :src="productoEditando.imagenUrl || '/img/no-image.png'" alt="Imagen producto"
                                    style="max-width: 180px; max-height: 180px;" />
                            </div>
                            <label>Cambiar imagen</label>
                            <input ref="inputImagen" type="file" accept="image/*" class="form-control" />
                        </div>
                        <div class="text-end">
                            <button class="btn btn-secondary" type="button"
                                @@click="cerrarModalEditar">Cancelar</button>
                            <button class="btn btn-primary" type="submit">💾 Guardar Cambios</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .categoria-card {
        transition: all 0.3s ease;
        user-select: none;
        cursor: pointer;
        border-width: 2px;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        color: inherit;
        /* para que cambie color con la clase */
    }

    .categoria-card:hover {
        border-color: #0d6efd;
        background-color: #e7f1ff;
        color: #0d6efd;
    }

    /* Quitar flechas de los inputs type="number" en Chrome, Safari, Edge, Opera */
    input[type="number"]::-webkit-inner-spin-button,
    input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    /* Quitar flechas en Firefox */
    input[type="number"] {
        -moz-appearance: textfield;
    }
</style>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/vue@3/dist/vue.global.prod.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        const { createApp, ref, reactive, computed, onMounted } = Vue;

        // Añade los token a las peticiones
        axios.interceptors.request.use(config => {
            const token = sessionStorage.getItem('jwt');
            if (token) {
                config.headers.Authorization = `Bearer ${token}`;
            }
            return config;
        }, error => Promise.reject(error));

        // Maneja los errores
        axios.interceptors.response.use(response => response, error => {
            if (error.response && error.response.status === 401) {
                alert('Sesión expirada o no autorizada. Por favor, inicia sesión nuevamente.');
                localStorage.removeItem('jwt');
                window.location.href = "/Identity/Account/Login";
            }
            return Promise.reject(error);
        });

        createApp({
            setup() {
                const productoAEliminar = ref(null);
                const productoEditando = reactive({ id: null, nombre: '', descripcion: '', precio: 0, stock: 0, categoriaId: '', imagenUrl: '' });
                const categorias = ref([]);
                const productos = ref([]);
                const filtros = reactive({ categoriaId: null, nombre: '', page: 1, pageSize: 6 });
                const totalProductos = ref(0);
                const productosSeleccionados = ref([]);
                let debounceTimer = null;


                const modalInstance = ref(null);
                const modalEliminarInstance = ref(null);
                const modalEditarInstance = ref(null);

                const errorMensaje = ref('');
                const exitoMensaje = ref('');

                ////////// Computeds ////////
                const totalPaginas = computed(() => Math.ceil(totalProductos.value / filtros.pageSize));
                const totalVenta = computed(() =>
                    productosSeleccionados.value.reduce((acc, item) => acc + item.precio * item.cantidad, 0)
                );
                const estaLogueado = computed(() => {
                    return !!sessionStorage.getItem('jwt');
                });

                ////////// Metodos /////////

                // Mostrar el mensaje por 5s
                function mostrarError(mensaje) {
                    errorMensaje.value = mensaje;
                    setTimeout(() => errorMensaje.value = '', 5000);
                }

                function mostrarExito(mensaje) {
                    exitoMensaje.value = mensaje;
                    setTimeout(() => exitoMensaje.value = '', 4000);
                }

                function cambiarCategoria(id) {
                    filtros.categoriaId = id;
                    filtros.page = 1;
                    cargarProductos();
                }

                function cargarCategorias() {
                    axios.get('/api/ProductosApi/Categorias')
                        .then(res => categorias.value = res.data)
                        .catch(console.error);
                }

                function cargarProductos() {
                    guardarFiltrosEnSession();
                    axios.get('/api/ProductosApi/Filtrados', { params: { ...filtros } })
                        .then(res => {
                            productos.value = res.data.productos;
                            totalProductos.value = res.data.total;
                        })
                        .catch(console.error);
                }

                function guardarFiltrosEnSession() {
                    sessionStorage.setItem('filtrosProductos', JSON.stringify(filtros));
                }

                function cargarFiltrosDesdeSession() {
                    const guardado = sessionStorage.getItem('filtrosProductos');
                    if (guardado) {
                        const data = JSON.parse(guardado);
                        filtros.categoriaId = data.categoriaId;
                        filtros.nombre = data.nombre;
                        filtros.page = data.page || 1;
                    }
                }

                function cambiarPagina(pagina) {
                    if (pagina < 1 || pagina > totalPaginas.value) return;
                    filtros.page = pagina;
                    cargarProductos();
                    window.scrollTo({ top: 0, behavior: 'smooth' }); // Desplazamiento suave al inicio
                }

                function cargarProductosDebounce() {
                    clearTimeout(debounceTimer);
                    debounceTimer = setTimeout(() => {
                        filtros.page = 1;
                        cargarProductos();
                    }, 400);
                }

                function toggleSeleccion(producto) {
                    const index = productosSeleccionados.value.findIndex(p => p.id === producto.id);
                    if (index !== -1) {
                        productosSeleccionados.value.splice(index, 1);
                    } else if (producto.stock > 0) {
                        productosSeleccionados.value.push({ ...producto, cantidad: 1 });
                    }
                    guardarSession();
                }

                function estaSeleccionado(id) {
                    return productosSeleccionados.value.some(p => p.id === id);
                }

                function removerProducto(id) {
                    productosSeleccionados.value = productosSeleccionados.value.filter(p => p.id !== id);
                    guardarSession();
                }

                function guardarSession() {
                    sessionStorage.setItem('productosVenta', JSON.stringify(productosSeleccionados.value));
                }

                function cargarSession() {
                    const data = sessionStorage.getItem('productosVenta');
                    if (data) productosSeleccionados.value = JSON.parse(data);
                }

                function abrirModalEliminar(p) {
                    productoAEliminar.value = p;
                    if (!modalEliminarInstance.value) modalEliminarInstance.value = new bootstrap.Modal(document.querySelector('#modalEliminarProducto'));
                    modalEliminarInstance.value.show();
                }

                function cerrarModalEliminar() {
                    modalEliminarInstance.value?.hide();
                    productoAEliminar.value = null;
                }

                function confirmarEliminar() {
                    axios.delete(`/api/ProductosApi/${productoAEliminar.value.id}`)
                        .then(() => {
                            mostrarExito("✅ Producto eliminado correctamente.");
                            cargarProductos();
                            cerrarModalEliminar();
                        })
                        .catch(error => {
                            if (error.response && error.response.data) {
                                mostrarError(`❌ Error: ${error.response.data}`);
                            } else {
                                mostrarError("❌ Ocurrió un error al intentar eliminar el producto.");
                            }
                        });
                }

                function abrirModalEditar(p) {
                    Object.assign(productoEditando, p);
                    if (!modalEditarInstance.value) modalEditarInstance.value = new bootstrap.Modal(document.querySelector('#modalEditarProducto'));
                    modalEditarInstance.value.show();
                }

                function cerrarModalEditar() {
                    modalEditarInstance.value?.hide();
                }

                function guardarCambiosProducto() {
                    if (!productoEditando.nombre || productoEditando.precio <= 0) {
                        mostrarError("Debe completar los campos correctamente.");
                        return;
                    }

                    const formData = new FormData();
                    for (const key in productoEditando) {
                        formData.append(key, productoEditando[key]);
                    }
                    // Adjuntar imagen si se seleccionó
                    const inputImagen = document.querySelector('#modalEditarProducto input[type="file"]');
                    if (inputImagen && inputImagen.files.length > 0) {
                        formData.append('nuevaImagen', inputImagen.files[0]);
                    }

                    axios.put(`/api/ProductosApi/${productoEditando.id}`, formData, {
                        headers: { 'Content-Type': 'multipart/form-data' }
                    })
                        .then(() => {
                            mostrarExito("✅ Los cambios del producto fueron guardados.");
                            cargarProductos();
                            cerrarModalEditar();
                        })
                        .catch(() => mostrarError("❌ No se pudieron guardar los cambios del producto."));
                }


                function abrirModalCarrito() {
                    if (!modalInstance.value) modalInstance.value = new bootstrap.Modal(document.querySelector('#modalCarrito'));
                    modalInstance.value.show();
                }

                function cerrarModalCarrito() {
                    modalInstance.value?.hide();
                }

                function aumentarCantidad(item) {
                    if (item.cantidad < item.stock) {
                        item.cantidad++;
                        actualizarCantidad(item);
                    } else {
                        mostrarError(`No puedes agregar más de ${item.stock} unidades.`);
                    }
                }

                function disminuirCantidad(item) {
                    if (item.cantidad > 1) {
                        item.cantidad--;
                        actualizarCantidad(item);
                    } else {
                        mostrarError("La cantidad mínima es 1.");
                    }
                }

                function actualizarCantidad(item) {
                    if (item.cantidad < 1) {
                        item.cantidad = 1;
                    } else if (item.cantidad > item.stock) {
                        mostrarError(`La cantidad no puede superar el stock (${item.stock})`);
                        item.cantidad = item.stock;
                    }
                    guardarSession();
                }

                function irACrearVenta() {
                    if (productosSeleccionados.value.length === 0) {
                        mostrarError("Debe seleccionar al menos un producto para continuar.");
                        return;
                    }
                    guardarSession();
                    window.location.href = "/Ventas/Crear";
                }

                /////////// Mounted //////////
                onMounted(() => {
                    cargarCategorias();
                    cargarSession();
                    cargarFiltrosDesdeSession();
                    cargarProductos();
                });

                return {
                    productoAEliminar,
                    productoEditando,
                    categorias,
                    cambiarCategoria,
                    productos,
                    filtros,
                    totalProductos,
                    productosSeleccionados,
                    totalPaginas,
                    totalVenta,
                    cargarProductos,
                    cargarProductosDebounce,
                    cambiarPagina,
                    toggleSeleccion,
                    estaSeleccionado,
                    removerProducto,
                    actualizarCantidad,
                    abrirModalEliminar,
                    cerrarModalEliminar,
                    confirmarEliminar,
                    abrirModalEditar,
                    cerrarModalEditar,
                    aumentarCantidad,
                    disminuirCantidad,
                    actualizarCantidad,
                    guardarCambiosProducto,
                    abrirModalCarrito,
                    cerrarModalCarrito,
                    irACrearVenta,
                    errorMensaje,
                    exitoMensaje,
                    mostrarError,
                    mostrarExito,
                    estaLogueado
                };
            }
        }).mount('#app');
    </script>
}
