@{
    ViewData["Title"] = "Administrar Productos - Crear Venta";
}

<div id="app" class="container-fluid py-5">
    

    <!-- BOT√ìN CREAR PRODUCTO -->
    <div class="mb-3 d-flex justify-content-between align-items-center">
        <h2 class="mb-4">Administrar Productos</h2>
        <a href="/Productos/Create" class="btn btn-success">
            ‚ûï Crear Producto
        </a>
    </div>

    <!-- FILTROS -->
    <div class="row mb-3">
        <div class="col-md-4">
            <label for="categoria">Categor√≠a</label>
            <select v-model="filtros.categoriaId" @@change="cargarProductos" class="form-select" id="categoria">
                <option :value="null">-- Todas las categor√≠as --</option>
                <option v-for="cat in categorias" :key="cat.id" :value="cat.id">{{ cat.nombre }}</option>
            </select>
        </div>

        <div class="col-md-4">
            <label for="buscador">Buscar producto</label>
            <input type="text" id="buscador" v-model="filtros.nombre" @@input="cargarProductosDebounce" placeholder="Nombre del producto" class="form-control" />
        </div>
    </div>

    <!-- LISTADO PRODUCTOS -->
    <div class="row">
        <div v-for="producto in productos" :key="producto.id" class="col-md-4 mb-4">
            <div class="card h-100 shadow-sm" 
                :class="{ 'border-success': estaSeleccionado(producto.id), 'opacity-75': producto.stock === 0 }">
                <img :src="producto.imagenUrl" class="card-img-top" alt="Imagen producto" style="height:180px; object-fit:contain;">
                <!-- Dentro de cada tarjeta del producto -->
                <div class="card-body d-flex flex-column">
                    <h5 class="card-title">{{ producto.nombre }}</h5>
                    <p class="card-text">{{ producto.descripcion }}</p>
                    <p class="mb-1"><strong>Precio:</strong> ${{ producto.precio.toFixed(2) }}</p>
                    <p><strong>Stock:</strong> {{ producto.stock }}</p>

                    <!-- Botones Editar y Eliminar (arriba, separados del bot√≥n principal) -->
                    <div class="mb-3 d-flex justify-content-end gap-2">
                        <button class="btn btn-warning btn-sm" @@click="abrirModalEditar(producto)">‚úèÔ∏è Editar</button>
                        <button class="btn btn-danger btn-sm" @@click="abrirModalEliminar(producto)">üóëÔ∏è Borrar</button>
                    </div>

                    <!-- Bot√≥n Agregar/Quitar, al final y tomando todo el ancho -->
                    <button 
                        class="btn mt-auto"
                        :class="estaSeleccionado(producto.id) ? 'btn-danger' : 'btn-primary'"
                        @@click="toggleSeleccion(producto)"
                        :disabled="producto.stock === 0">
                        {{ estaSeleccionado(producto.id) ? '‚ùå Quitar' : '‚ûï Agregar' }}
                    </button>

                </div>
            </div>
        </div>
    </div>


    <!-- PAGINACION -->
    <nav aria-label="Paginaci√≥n">
        <ul class="pagination justify-content-center">
            <li class="page-item" :class="{ disabled: filtros.page === 1 }">
                <a class="page-link" href="#" @@click.prevent="cambiarPagina(filtros.page - 1)">Anterior</a>
            </li>
            <li class="page-item" v-for="p in totalPaginas" :key="p" :class="{ active: p === filtros.page }">
                <a class="page-link" href="#" @@click.prevent="cambiarPagina(p)">{{ p }}</a>
            </li>
            <li class="page-item" :class="{ disabled: filtros.page === totalPaginas }">
                <a class="page-link" href="#" @@click.prevent="cambiarPagina(filtros.page + 1)">Siguiente</a>
            </li>
        </ul>
    </nav>

    <!-- BOT√ìN FLOTANTE PARA ABRIR CARRITO -->
    <button 
        class="btn btn-primary position-fixed" 
        style="bottom: 30px; right: 30px; z-index: 1050;"
        @@click="abrirModalCarrito"
        :disabled="productosSeleccionados.length === 0"
        title="Ver carrito de venta"
        >
        üõí Carrito ({{ productosSeleccionados.length }})
    </button>

    <!-- MODAL DEL CARRITO -->
    <div class="modal fade" id="modalCarrito" tabindex="-1" aria-labelledby="modalCarritoLabel" aria-hidden="true" ref="modalCarrito">
        <div class="modal-dialog modal-lg modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalCarritoLabel">Carrito de Productos para Venta</h5>
                    <button type="button" class="btn-close" @@click="cerrarModalCarrito" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <table class="table table-bordered" v-if="productosSeleccionados.length > 0">
                        <thead>
                            <tr>
                                <th>Producto</th>
                                <th style="width:120px;">Cantidad</th>
                                <th>Precio Unitario</th>
                                <th>Subtotal</th>
                                <th style="width:80px;">Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="item in productosSeleccionados" :key="item.id">
                                <td>{{ item.nombre }}</td>
                                <td>
                                    <input type="number" min="1" :max="item.stock" v-model.number="item.cantidad" @@change="actualizarCantidad(item)" class="form-control" />
                                </td>
                                <td>${{ item.precio.toFixed(2) }}</td>
                                <td>${{ (item.precio * item.cantidad).toFixed(2) }}</td>
                                <td>
                                    <button class="btn btn-danger btn-sm" @@click="removerProducto(item.id)">üóëÔ∏è</button>
                                </td>
                            </tr>
                        </tbody>
                        <tfoot>
                            <tr>
                                <th colspan="3" class="text-end">Total:</th>
                                <th>${{ totalVenta.toFixed(2) }}</th>
                                <th></th>
                            </tr>
                        </tfoot>
                    </table>
                    <p v-else>No hay productos seleccionados.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @@click="cerrarModalCarrito">Cerrar</button>
                    <button type="button" class="btn btn-success" :disabled="productosSeleccionados.length === 0" @@click="confirmarVenta">
                        ‚úÖ Confirmar Venta
                    </button>
                </div>
            </div>
        </div>
    </div>
    <!-- MODAL ELIMINAR PRODUCTO -->
    <div class="modal fade" id="modalEliminarProducto" tabindex="-1" ref="modalEliminar">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">Eliminar Producto</h5>
                    <button type="button" class="btn-close" @@click="cerrarModalEliminar"></button>
                </div>
                <div class="modal-body">
                    <p>¬øSeguro que quer√©s eliminar <strong>{{ productoAEliminar?.nombre }}</strong>?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @@click="cerrarModalEliminar">Cancelar</button>
                    <button class="btn btn-danger" @@click="confirmarEliminar">üóëÔ∏è Eliminar</button>
                </div>
            </div>
        </div>
    </div>
    <!-- MODAL EDITAR PRODUCTO -->
    <div class="modal fade" id="modalEditarProducto" tabindex="-1" ref="modalEditar">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-warning text-dark">
                    <h5 class="modal-title">‚úèÔ∏è Editar Producto</h5>
                    <button type="button" class="btn-close" @@click="cerrarModalEditar"></button>
                </div>
                <div class="modal-body">
                    <form v-on:submit.prevent="guardarCambiosProducto">
                        <div class="mb-3">
                            <label>Nombre</label>
                            <input v-model="productoEditando.nombre" class="form-control" required />
                        </div>
                        <div class="mb-3">
                            <label>Descripci√≥n</label>
                            <textarea v-model="productoEditando.descripcion" class="form-control" rows="2"></textarea>
                        </div>
                        <div class="mb-3">
                            <label>Precio</label>
                            <input v-model.number="productoEditando.precio" type="number" min="0" class="form-control" required />
                        </div>
                        <div class="mb-3">
                            <label>Stock</label>
                            <input v-model.number="productoEditando.stock" type="number" min="0" class="form-control" required />
                        </div>
                        <div class="mb-3">
                            <label>Categor√≠a</label>
                            <select v-model="productoEditando.categoriaId" class="form-select" required>
                                <option disabled value="">Seleccione una categor√≠a</option>
                                <option v-for="cat in categorias" :value="cat.id">{{ cat.nombre }}</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label>URL de Imagen</label>
                            <input v-model="productoEditando.imagenUrl" type="text" class="form-control" />
                        </div>
                        <div class="text-end">
                            <button class="btn btn-secondary me-2" type="button" @@click="cerrarModalEditar">Cancelar</button>
                            <button class="btn btn-warning" type="submit">üíæ Guardar Cambios</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

</div>

@section Scripts {
<script src="https://cdn.jsdelivr.net/npm/vue@3/dist/vue.global.prod.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
const { createApp } = Vue;

createApp({
    data() {
        return {
            productoAEliminar: null,
            modalEliminarInstance: null,
            productoEditando: {
                id: null,
                nombre: '',
                descripcion: '',
                precio: 0,
                stock: 0,
                categoriaId: '',
                imagenUrl: ''
            },
            modalEditarInstance: null,
            categorias: [],
            productos: [],
            filtros: {
                categoriaId: null,
                nombre: '',
                page: 1,
                pageSize: 6
            },
            totalProductos: 0,
            productosSeleccionados: [],
            debounceTimer: null,
            modalInstance: null,
        };
    },
    computed: {
        totalPaginas() {
            return Math.ceil(this.totalProductos / this.filtros.pageSize);
        },
        totalVenta() {
            return this.productosSeleccionados.reduce((acc, item) => acc + item.precio * item.cantidad, 0);
        }
    },
    methods: {
        cargarCategorias() {
            axios.get('/api/ProductosApi/Categorias')
                .then(res => { this.categorias = res.data; });
        },
        cargarProductos() {
            const params = { ...this.filtros };
            axios.get('/api/ProductosApi/Filtrados', { params })
                .then(res => {
                    this.productos = res.data.productos;
                    this.totalProductos = res.data.total;
                });
        },
        abrirModalEliminar(producto) {
        this.productoAEliminar = producto;
        if (!this.modalEliminarInstance) {
            this.modalEliminarInstance = new bootstrap.Modal(this.$refs.modalEliminar);
        }
        this.modalEliminarInstance.show();
        },
        cerrarModalEliminar() {
            this.modalEliminarInstance?.hide();
            this.productoAEliminar = null;
        },
        confirmarEliminar() {
            axios.delete(`/api/ProductosApi/${this.productoAEliminar.id}`)
                .then(() => {
                    alert("‚úÖ Producto eliminado");
                    this.cargarProductos();
                    this.cerrarModalEliminar();
                })
                .catch(err => {
                    alert("‚ùå Error eliminando producto");
                    console.error(err);
                });
        },
        abrirModalEditar(producto) {
            this.productoEditando = { ...producto, categoriaId: this.obtenerCategoriaId(producto.categoriaNombre) };
            if (!this.modalEditarInstance) {
                this.modalEditarInstance = new bootstrap.Modal(this.$refs.modalEditar);
            }
            this.modalEditarInstance.show();
        },
        cerrarModalEditar() {
            this.modalEditarInstance?.hide();
        },
        guardarCambiosProducto() {
            axios.put(`/api/ProductosApi/${this.productoEditando.id}`, this.productoEditando)
                .then(() => {
                    alert("‚úÖ Cambios guardados");
                    this.cargarProductos();
                    this.cerrarModalEditar();
                })
                .catch(err => {
                    alert("‚ùå Error guardando cambios");
                    console.error(err);
                });
        },
        obtenerCategoriaId(nombreCategoria) {
            const cat = this.categorias.find(c => c.nombre === nombreCategoria);
            return cat ? cat.id : '';
        },
        cambiarPagina(pagina) {
            if (pagina < 1 || pagina > this.totalPaginas) return;
            this.filtros.page = pagina;
            this.cargarProductos();
        },
        toggleSeleccion(producto) {
            const index = this.productosSeleccionados.findIndex(p => p.id === producto.id);
            if (index !== -1) {
                this.productosSeleccionados.splice(index, 1);
            } else if (producto.stock > 0) {
                this.productosSeleccionados.push({
                    id: producto.id,
                    nombre: producto.nombre,
                    precio: producto.precio,
                    stock: producto.stock,
                    cantidad: 1
                });
            }
            this.guardarSession();
        },
        estaSeleccionado(idProducto) {
            return this.productosSeleccionados.some(p => p.id === idProducto);
        },
        removerProducto(id) {
            this.productosSeleccionados = this.productosSeleccionados.filter(p => p.id !== id);
            this.guardarSession();
        },
        actualizarCantidad(item) {
            if (item.cantidad < 1) item.cantidad = 1;
            if (item.cantidad > item.stock) {
                alert(`La cantidad no puede superar el stock (${item.stock})`);
                item.cantidad = item.stock;
            }
            this.guardarSession();
        },
        guardarSession() {
            sessionStorage.setItem('productosVenta', JSON.stringify(this.productosSeleccionados));
        },
        cargarSession() {
            const data = sessionStorage.getItem('productosVenta');
            if (data) {
                this.productosSeleccionados = JSON.parse(data);
            }
        },
        abrirModalCarrito() {
            if (!this.modalInstance) {
                const modalEl = this.$refs.modalCarrito;
                this.modalInstance = new bootstrap.Modal(modalEl);
            }
            this.modalInstance.show();
        },
        cerrarModalCarrito() {
            if (this.modalInstance) {
                this.modalInstance.hide();
            }
        },
        confirmarVenta() {
            const payload = this.productosSeleccionados.map(p => ({
                productoId: p.id,
                cantidad: p.cantidad
            }));

            // ClienteId debe venir del contexto, aqu√≠ un ejemplo fijo:
            const ventaCrearDTO = {
                clienteId: this.clienteIdSeleccionado || 1, 
                detalles: payload
            };

            axios.post('/api/VentasApi', ventaCrearDTO)
                .then(() => {
                    alert("‚úÖ Venta creada con √©xito");
                    this.productosSeleccionados = [];
                    this.guardarSession();
                    this.cargarProductos();
                    this.cerrarModalCarrito();
                })
                .catch(err => {
                    alert("‚ùå Error al crear la venta");
                    console.error(err);
                });
        },

        cargarProductosDebounce() {
            clearTimeout(this.debounceTimer);
            this.debounceTimer = setTimeout(() => {
                this.filtros.page = 1;
                this.cargarProductos();
            }, 400);
        }
    },
    mounted() {
        this.cargarCategorias();
        this.cargarSession();
        this.cargarProductos();
    }
}).mount('#app');
</script>
}